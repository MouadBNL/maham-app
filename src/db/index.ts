import { slugify } from "@/lib/utils";
import Dexie, { Table } from "dexie";

type AutoGenerated = "id" | "created_at" | "updated_at";

export interface DEX_Task {
  id: string;
  project_id?: string;
  title: string;
  due_at: Date;
  completed_at?: Date;
  created_at: Date;
  updated_at: Date;
}

export interface DEX_Project {
  id: string;
  name: string;
  slug: string;
  created_at: Date;
  updated_at: Date;

  tasks?: DEX_Task[];
}

class MahamDB extends Dexie {
  tasks!: Table<DEX_Task, string>;
  projects!: Table<DEX_Project, string>;

  constructor() {
    super("MahamDB");
    this.version(4).stores({
      tasks:
        "&id, project_id, title, due_at, completed_at, created_at, updated_at",
      projects: "&id, name, &slug, created_at, updated_at",
    });
  }

  async getTasks() {
    return (await this.tasks.reverse().sortBy("created_at")).reverse();
  }

  async createTask(task: Omit<DEX_Task, "id" | "created_at" | "updated_at">) {
    const id = crypto.randomUUID();
    await this.tasks.add({
      id,
      ...task,
      created_at: new Date(),
      updated_at: new Date(),
    });
    return id;
  }

  async updateTask(
    id: string,
    task: Partial<Omit<DEX_Task, "id" | "created_at" | "updated_at">>,
  ) {
    await this.tasks.update(id, {
      ...task,
      updated_at: new Date(),
    });
  }

  async deleteTask(id: string) {
    await this.tasks.delete(id);
  }

  async createProject(project: Omit<DEX_Project, AutoGenerated | "slug">) {
    const id = crypto.randomUUID();
    await this.projects.add({
      id,
      ...project,
      slug: `${slugify(project.name)}-${id}`,
      created_at: new Date(),
      updated_at: new Date(),
    });
  }

  async getProjects() {
    return (await this.projects.reverse().sortBy("created_at")).reverse();
  }

  async deleteProject(id: string) {
    await this.projects.delete(id);
    await this.tasks.where({ project_id: id }).delete();
  }

  async getProject(slug: string) {
    const project = await this.projects.where({ slug: slug }).first();
    if (!project) throw new Error("Not found");
    project.tasks = await this.tasks
      .where({ project_id: project.id })
      .toArray();

    return project;
  }
}

export const dxdb = new MahamDB();
